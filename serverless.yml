service: generate-rss # NOTE: update this with your service name

podcastDetails:
  title: Coalition Radio Hour
  description: Welcome to the 1940's
  generator: ''
  feed_url: ''
  site_url: https://github.com/zaneadix
  image_url: https://scontent.fric1-2.fna.fbcdn.net/v/t1.0-9/55782372_1602755046534308_620276380864610304_o.jpg?_nc_cat=109&_nc_ht=scontent.fric1-2.fna&oh=35b935754c8eb82fd7d16a317642b5d5&oe=5D4A4028
  docs: ''
  managingEditor: Zane Adickes
  webMaster: Zane Adickes
  copyright: ''
  language: en
  categories:
    - 'old time'
    - 'comedy'
    - 'improv'
  pubDate: ''
  ttl: 60
  custom_namespaces:
    - itunes: http://www.itunes.com/dtds/podcast-1.0.dtd
  custom_elements:
    - itunes:subtitle: Good time for everyone
    - itunes:author: Zane Adickes
    - itunes:summary: This is shorter than the description I guess
    - itunes:owner:
        - itunes:name: Zane Adickes
        - itunes:email: zaneadix@gmail.com
    - itunes:image:
      _attr:
        href: https://scontent.fric1-2.fna.fbcdn.net/v/t1.0-9/55782372_1602755046534308_620276380864610304_o.jpg?_nc_cat=109&_nc_ht=scontent.fric1-2.fna&oh=35b935754c8eb82fd7d16a317642b5d5&oe=5D4A4028
    - itunes:category:
        - _attr:
          text: 'Comedy'
    - itunes:category:
        - _attr:
          text: 'Banana'

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    EPISODES_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-podcast-episodes
    RSS_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-podcast-episodes
    RSS_FILE: 'rss.xml'
    # PODCAST_DETAILS: '${self:custom.podcastDetails}'
    # PODCAST_TITLE: Coalition Radio Hour
    # PODCAST_DESCRIPTION: Welcome to the 1940's
    # PODCAST_SITE_URL: https://github.com/zaneadix
    # PODCAST_IMAGE_URL: https://scontent.fric1-2.fna.fbcdn.net/v/t1.0-9/55782372_1602755046534308_620276380864610304_o.jpg?_nc_cat=109&_nc_ht=scontent.fric1-2.fna&oh=35b935754c8eb82fd7d16a317642b5d5&oe=5D4A4028
    # PODCAST: 'banana, fun, cheese, punches'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - 'arn:aws:s3:::${self:provider.environment.EPISODES_BUCKET}/*'
        - 'arn:aws:s3:::${self:provider.environment.RSS_BUCKET}/*'

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  generateRSS:
    handler: handler.generateRSS
    events:
      - s3:
          bucket: ${self:provider.environment.EPISODES_BUCKET}
          event: s3:ObjectCreated:*
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
